{"version":3,"file":"index.js","mappings":";;;;;;;;;;AAAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;CCLA;AACA;AACA;;AAIA,IAAME,YAAY,GAAG,SAAfA,YAAe,GAAY;EAC/B;EACA,IAAMC,UAAU,GAAG,IAAIF,mDAAJ,CAAkB;IACnCG,MAAM,EAAE,GAD2B;IAEnCC,KAAK,EAAE,GAF4B;IAGnCC,cAAc,EAAE;MACdC,OAAO,EAAEC,SAAiCA;IAD5B;EAHmB,CAAlB,CAAnB,CAF+B,CAU/B;;EACAL,UAAU,CAACM,OAAX,CAAmBC,mCAAnB,EAX+B,CAa/B;;EACAP,UAAU,CAACQ,WAAX,CAAuBC,YAAvB;AACD,CAfD,EAiBA;AACA;AACA;;;AACAZ,4CAAA,CAAO,OAAP,EAAgBE,YAAhB,GAEA;AACA;AACA;;AACAF,4CAAA,CAAO,mBAAP,EAA4B,YAAM;EAChC,IAAIc,OAAO,CAACC,QAAR,KAAqB,QAAzB,EAAmC;IACjCf,8CAAA;EACD;AACF,CAJD;AAMAA,4CAAA,CAAO,UAAP,EAAmB,YAAM;EACvB;EACA;EACA,IAAIC,iEAAA,GAA8BiB,MAA9B,KAAyC,CAA7C,EAAgD;IAC9ChB,YAAY;EACb;AACF,CAND,GAQA;AACA,sE","sources":["webpack://github-pages-electron-boilerplate/external node-commonjs \"electron\"","webpack://github-pages-electron-boilerplate/webpack/bootstrap","webpack://github-pages-electron-boilerplate/webpack/runtime/compat get default export","webpack://github-pages-electron-boilerplate/webpack/runtime/define property getters","webpack://github-pages-electron-boilerplate/webpack/runtime/hasOwnProperty shorthand","webpack://github-pages-electron-boilerplate/webpack/runtime/make namespace object","webpack://github-pages-electron-boilerplate/./src/mainWindow.ts"],"sourcesContent":["module.exports = require(\"electron\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { app, BrowserWindow } from \"electron\";\n// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack\n// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on\n// whether you're running in development or production).\ndeclare const MAIN_WINDOW_WEBPACK_ENTRY: string;\ndeclare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;\n\nconst createWindow = (): void => {\n  // Create the browser window.\n  const mainWindow = new BrowserWindow({\n    height: 600,\n    width: 800,\n    webPreferences: {\n      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,\n    },\n  });\n\n  // and load the index.html of the app.\n  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);\n\n  // Open the DevTools.\n  mainWindow.webContents.openDevTools();\n};\n\n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\n// Some APIs can only be used after this event occurs.\napp.on(\"ready\", createWindow);\n\n// Quit when all windows are closed, except on macOS. There, it's common\n// for applications and their menu bar to stay active until the user quits\n// explicitly with Cmd + Q.\napp.on(\"window-all-closed\", () => {\n  if (process.platform !== \"darwin\") {\n    app.quit();\n  }\n});\n\napp.on(\"activate\", () => {\n  // On OS X it's common to re-create a window in the app when the\n  // dock icon is clicked and there are no other windows open.\n  if (BrowserWindow.getAllWindows().length === 0) {\n    createWindow();\n  }\n});\n\n// In this file you can include the rest of your app's specific main process\n// code. You can also put them in separate files and import them here.\n"],"names":["app","BrowserWindow","createWindow","mainWindow","height","width","webPreferences","preload","MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY","loadURL","MAIN_WINDOW_WEBPACK_ENTRY","webContents","openDevTools","on","process","platform","quit","getAllWindows","length"],"sourceRoot":""}