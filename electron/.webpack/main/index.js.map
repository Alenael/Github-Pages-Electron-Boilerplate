{"version":3,"file":"index.js","mappings":"mBACA,I,KCAwB,CAACA,IACH,oBAAXC,QAA0BA,OAAOC,aAC1CC,OAAOC,eAAeJ,EAASC,OAAOC,YAAa,CAAEG,MAAO,WAE7DF,OAAOC,eAAeJ,EAAS,aAAc,CAAEK,OAAO,GAAO,E,ICL9D,MAAM,EAA+BC,QAAQ,YCO7C,IAAMC,EAAe,WAEnB,IAAMC,EAAa,IAAIC,EAAAA,cAAc,CACnCC,OAAQ,IACRC,MAAO,IACPC,eAAgB,CACdC,aAASC,KAKbN,EAAWO,QAAQC,UAAAA,QAAAA,QAAAA,QAAAA,UAAAA,KAAAA,WAAAA,cAAAA,iBAGnBR,EAAWS,YAAYC,cACxB,EAKDC,EAAAA,IAAAA,GAAO,QAASZ,GAKhBY,EAAAA,IAAAA,GAAO,qBAAqB,WACD,WAArBC,QAAQC,UACVF,EAAAA,IAAAA,MAEH,IAEDA,EAAAA,IAAAA,GAAO,YAAY,WAG4B,IAAzCV,EAAAA,cAAAA,gBAA8Ba,QAChCf,GAEH,I","sources":["webpack://github-pages-electron-boilerplate/webpack/bootstrap","webpack://github-pages-electron-boilerplate/webpack/runtime/make namespace object","webpack://github-pages-electron-boilerplate/external node-commonjs \"electron\"","webpack://github-pages-electron-boilerplate/./src/mainWindow.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"electron\");","import { app, BrowserWindow } from \"electron\";\n// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack\n// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on\n// whether you're running in development or production).\ndeclare const MAIN_WINDOW_WEBPACK_ENTRY: string;\ndeclare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;\n\nconst createWindow = (): void => {\n  // Create the browser window.\n  const mainWindow = new BrowserWindow({\n    height: 600,\n    width: 800,\n    webPreferences: {\n      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,\n    },\n  });\n\n  // and load the index.html of the app.\n  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);\n\n  // Open the DevTools.\n  mainWindow.webContents.openDevTools();\n};\n\n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\n// Some APIs can only be used after this event occurs.\napp.on(\"ready\", createWindow);\n\n// Quit when all windows are closed, except on macOS. There, it's common\n// for applications and their menu bar to stay active until the user quits\n// explicitly with Cmd + Q.\napp.on(\"window-all-closed\", () => {\n  if (process.platform !== \"darwin\") {\n    app.quit();\n  }\n});\n\napp.on(\"activate\", () => {\n  // On OS X it's common to re-create a window in the app when the\n  // dock icon is clicked and there are no other windows open.\n  if (BrowserWindow.getAllWindows().length === 0) {\n    createWindow();\n  }\n});\n\n// In this file you can include the rest of your app's specific main process\n// code. You can also put them in separate files and import them here.\n"],"names":["exports","Symbol","toStringTag","Object","defineProperty","value","require","createWindow","mainWindow","BrowserWindow","height","width","webPreferences","preload","MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY","loadURL","MAIN_WINDOW_WEBPACK_ENTRY","webContents","openDevTools","app","process","platform","length"],"sourceRoot":""}